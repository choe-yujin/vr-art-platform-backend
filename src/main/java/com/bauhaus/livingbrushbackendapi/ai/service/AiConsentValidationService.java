package com.bauhaus.livingbrushbackendapi.ai.service;

import com.bauhaus.livingbrushbackendapi.exception.common.CustomException;
import com.bauhaus.livingbrushbackendapi.exception.common.ErrorCode;
import com.bauhaus.livingbrushbackendapi.user.entity.User;
import com.bauhaus.livingbrushbackendapi.user.entity.UserSetting;
import com.bauhaus.livingbrushbackendapi.user.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * AI Í∏∞Îä• ÏÇ¨Ïö© ÎèôÏùò Í≤ÄÏ¶ù ÏÑúÎπÑÏä§
 * 
 * Ï†ïÏ±Ö: AI Í∏∞Îä• ÏÇ¨Ïö© Ï†Ñ STT ÎèôÏùò, AI Í∏∞Îä• ÎèôÏùò Ïó¨Î∂ÄÎ•º Î∞òÎìúÏãú ÌôïÏù∏Ìï¥Ïïº Ìï®
 * 
 * @author Bauhaus Team
 * @version 1.0
 */
@Slf4j
@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
public class AiConsentValidationService {

    private final UserRepository userRepository;

    /**
     * ÏÇ¨Ïö©ÏûêÏùò AI Í∏∞Îä• ÏÇ¨Ïö© ÎèôÏùò Ïó¨Î∂ÄÎ•º Í≤ÄÏ¶ùÌï©ÎãàÎã§.
     * 
     * @param userId Í≤ÄÏ¶ùÌï† ÏÇ¨Ïö©Ïûê ID
     * @throws CustomException STT ÎòêÎäî AI Í∏∞Îä• ÎØ∏ÎèôÏùò Ïãú
     */
    public void validateAiConsent(Long userId) {
        log.debug("üîç AI ÎèôÏùò Í≤ÄÏ¶ù ÏãúÏûë - ÏÇ¨Ïö©Ïûê ID: {}", userId);
        
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new CustomException(ErrorCode.USER_NOT_FOUND, 
                        "ÏÇ¨Ïö©ÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. ID: " + userId));
        
        UserSetting settings = user.getUserSettings();
        if (settings == null) {
            log.error("‚ùå ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ïÏù¥ ÏóÜÏäµÎãàÎã§ - ÏÇ¨Ïö©Ïûê ID: {}", userId);
            throw new CustomException(ErrorCode.INTERNAL_SERVER_ERROR, 
                    "ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ïÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
        }
        
        // STT ÎèôÏùò ÌôïÏù∏
        if (!settings.isSttConsent()) {
            log.warn("‚ùå STT ÏÇ¨Ïö© ÎØ∏ÎèôÏùò - ÏÇ¨Ïö©Ïûê ID: {}", userId);
            throw new CustomException(ErrorCode.STT_CONSENT_REQUIRED, 
                    "AI Í∏∞Îä• ÏÇ¨Ïö©ÏùÑ ÏúÑÌï¥ ÏùåÏÑ± Ïù∏Ïãù(STT) ÏÇ¨Ïö©Ïóê ÎèôÏùòÌï¥Ï£ºÏÑ∏Ïöî.");
        }
        
        // AI Í∏∞Îä• ÎèôÏùò ÌôïÏù∏
        if (!settings.isAiConsent()) {
            log.warn("‚ùå AI Í∏∞Îä• ÏÇ¨Ïö© ÎØ∏ÎèôÏùò - ÏÇ¨Ïö©Ïûê ID: {}", userId);
            throw new CustomException(ErrorCode.AI_CONSENT_REQUIRED, 
                    "AI Í∏∞Îä• ÏÇ¨Ïö©Ïóê ÎèôÏùòÌï¥Ï£ºÏÑ∏Ïöî.");
        }
        
        log.debug("‚úÖ AI ÎèôÏùò Í≤ÄÏ¶ù ÌÜµÍ≥º - ÏÇ¨Ïö©Ïûê ID: {}", userId);
    }

    /**
     * Îç∞Ïù¥ÌÑ∞ ÌïôÏäµ ÌôúÏö© ÎèôÏùò Ïó¨Î∂ÄÎ•º ÌôïÏù∏Ìï©ÎãàÎã§.
     * 
     * @param userId ÌôïÏù∏Ìï† ÏÇ¨Ïö©Ïûê ID
     * @return Îç∞Ïù¥ÌÑ∞ ÌïôÏäµ ÎèôÏùò Ïó¨Î∂Ä
     */
    public boolean isDataTrainingConsented(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new CustomException(ErrorCode.USER_NOT_FOUND));
        
        UserSetting settings = user.getUserSettings();
        if (settings == null) {
            return false;
        }
        
        boolean consented = settings.isDataTrainingConsent();
        log.debug("üìä Îç∞Ïù¥ÌÑ∞ ÌïôÏäµ ÎèôÏùò Ïó¨Î∂Ä - ÏÇ¨Ïö©Ïûê ID: {}, ÎèôÏùò: {}", userId, consented);
        
        return consented;
    }

    /**
     * ÏÇ¨Ïö©ÏûêÏùò Ï†ÑÏ≤¥ AI Í¥ÄÎ†® ÎèôÏùò ÏÉÅÌÉúÎ•º Ï°∞ÌöåÌï©ÎãàÎã§.
     * 
     * @param userId Ï°∞ÌöåÌï† ÏÇ¨Ïö©Ïûê ID
     * @return AI ÎèôÏùò ÏÉÅÌÉú Ï†ïÎ≥¥
     */
    public AiConsentStatus getAiConsentStatus(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new CustomException(ErrorCode.USER_NOT_FOUND));
        
        UserSetting settings = user.getUserSettings();
        if (settings == null) {
            return AiConsentStatus.builder()
                    .sttConsent(false)
                    .aiConsent(false)
                    .dataTrainingConsent(false)
                    .allRequired(false)
                    .build();
        }
        
        boolean allRequired = settings.isSttConsent() && settings.isAiConsent();
        
        return AiConsentStatus.builder()
                .sttConsent(settings.isSttConsent())
                .aiConsent(settings.isAiConsent())
                .dataTrainingConsent(settings.isDataTrainingConsent())
                .allRequired(allRequired)
                .build();
    }

    /**
     * AI ÎèôÏùò ÏÉÅÌÉú Ï†ïÎ≥¥ DTO
     */
    public static class AiConsentStatus {
        private final boolean sttConsent;
        private final boolean aiConsent;
        private final boolean dataTrainingConsent;
        private final boolean allRequired;

        private AiConsentStatus(boolean sttConsent, boolean aiConsent, 
                               boolean dataTrainingConsent, boolean allRequired) {
            this.sttConsent = sttConsent;
            this.aiConsent = aiConsent;
            this.dataTrainingConsent = dataTrainingConsent;
            this.allRequired = allRequired;
        }

        public static AiConsentStatusBuilder builder() {
            return new AiConsentStatusBuilder();
        }

        public boolean isSttConsent() { return sttConsent; }
        public boolean isAiConsent() { return aiConsent; }
        public boolean isDataTrainingConsent() { return dataTrainingConsent; }
        public boolean isAllRequired() { return allRequired; }

        public static class AiConsentStatusBuilder {
            private boolean sttConsent;
            private boolean aiConsent;
            private boolean dataTrainingConsent;
            private boolean allRequired;

            public AiConsentStatusBuilder sttConsent(boolean sttConsent) {
                this.sttConsent = sttConsent;
                return this;
            }

            public AiConsentStatusBuilder aiConsent(boolean aiConsent) {
                this.aiConsent = aiConsent;
                return this;
            }

            public AiConsentStatusBuilder dataTrainingConsent(boolean dataTrainingConsent) {
                this.dataTrainingConsent = dataTrainingConsent;
                return this;
            }

            public AiConsentStatusBuilder allRequired(boolean allRequired) {
                this.allRequired = allRequired;
                return this;
            }

            public AiConsentStatus build() {
                return new AiConsentStatus(sttConsent, aiConsent, dataTrainingConsent, allRequired);
            }
        }
    }
}
