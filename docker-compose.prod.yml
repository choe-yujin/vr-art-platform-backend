# docker-compose.prod.yml (AWS 운영용)

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: livingbrush-prod-backend
    environment:
      # 운영용 프로필(application-prod.yml)을 활성화합니다.
      - SPRING_PROFILES_ACTIVE=prod
      # RDS 접속 정보는 .env.prod 파일에서 주입합니다.
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${RDS_HOSTNAME}:${RDS_PORT}/${RDS_DB_NAME}
      - SPRING_DATASOURCE_USERNAME=${RDS_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${RDS_PASSWORD}
      # Redis 접속 정보 (Docker Compose 서비스명 사용)
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      # AWS S3 Configuration (IAM Role이 있으면 ACCESS_KEY는 불필요)
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - AWS_REGION=${AWS_REGION}
      # 나머지 운영에 필요한 환경 변수들
      - JWT_SECRET=${JWT_SECRET}
      - META_APP_ID=${META_APP_ID}
      - META_APP_SECRET=${META_APP_SECRET}
      - AI_SERVER_URL=${AI_SERVER_URL}
    # 운영 환경용 환경 변수 파일을 별도로 사용합니다.
    env_file:
      - .env.prod
    ports:
      # EC2의 80번 포트(HTTP)를 컨테이너의 8888번 포트로 연결합니다.
      - "80:8888"
      - "8888:8888"
    volumes:
      # EC2 호스트의 특정 경로와 컨테이너의 static-files를 연결하여 파일을 영속화합니다.
      - /home/ec2-user/static-files:/app/static-files
    depends_on:
      - redis
    restart: always
    networks:
      - bauhaus-network

  # Redis 서비스 (VR 로그인 토큰 관리용)
  redis:
    image: redis:7-alpine
    container_name: livingbrush-prod-redis
    command: redis-server --requirepass "${REDIS_PASSWORD:-defaultpassword}"
    ports:
      - "6379:6379"
    volumes:
      # Redis 데이터 영속화
      - /home/ec2-user/redis-data:/data
    restart: always
    networks:
      - bauhaus-network

# Docker 네트워크 생성
networks:
  bauhaus-network:
    driver: bridge